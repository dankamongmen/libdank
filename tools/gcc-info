#!/usr/bin/env bash

set -e || exit 1
set -o nounset
set -o pipefail

TMPOUT=`mktemp -t \`basename $0\`.XXXXX`
TMPOBJ=`mktemp -t \`basename $0\`.XXXXX`
TMPCODE=`mktemp -t \`basename $0\`.XXXXX`

err () {
	rm -f "$TMPCODE" "$TMPOBJ" "$TMPOUT"
}

trap err EXIT

GCC=gcc

echo "# Generated by `basename $0` on `date`"
echo "# GCC=$GCC"

echo "Writing file $TMPCODE:"
echo -e '#include <stdio.h>\nchar*f="char*f=%c%s%c;main(){printf(f,34,f,34,10);}%c";main(){printf(f,34,f,34,10);}' \
 | tee $TMPCODE

# Find out what all's getting defined at the preprocessor level
"$GCC" "$@" -E -v "$TMPCODE"

# The -Q trick is only supported on older gcc's
for i in 0 1 2 3 s ; do
	echo -e "\n\n\nOptimization level $i:"
	# Find out what flags each optimization level sets
	"$GCC" "$@" -x c -o "$TMPOBJ" -v -Q -O$i "$TMPCODE"
	g++ -x c++ -o "$TMPOBJ" -v -Q -O$i "$TMPCODE"
done

echo -e "\n\n\nValidating that working executables are generated..."
"$TMPOBJ" | tee "$TMPOUT"
tail -1 "$TMPCODE" | diff -ur /dev/stdin "$TMPOUT"
echo "Output matched input!"

cat > $TMPCODE <<SIZECODE
#include <stdio.h>
#include <stdint.h>
#include <sys/types.h>

#define PRINTSIZE(t) printf("Size of "#t": %zu\n",sizeof(t));

int main(void){
	PRINTSIZE('a');
	PRINTSIZE(char);
	PRINTSIZE(short);
	PRINTSIZE(int);
	PRINTSIZE(long);
	PRINTSIZE(long long);
	PRINTSIZE(uint_fast32_t);
	PRINTSIZE(uint_least32_t);
	PRINTSIZE(uint_fast64_t);
	PRINTSIZE(uint_least64_t);
	PRINTSIZE(intptr_t);
	PRINTSIZE(uintptr_t);
	PRINTSIZE(uintmax_t);
	PRINTSIZE(NULL);
	PRINTSIZE(size_t);
	PRINTSIZE(off_t);
	PRINTSIZE(void *);
	PRINTSIZE(void *(*)(void *));
	PRINTSIZE(float);
	PRINTSIZE(double);
	PRINTSIZE(long double);
	return 0;
}
SIZECODE

echo -e "\nInvestigating type sizes in C..."
"$GCC" "$@" -x c -o "$TMPOBJ" -O2 "$TMPCODE"
"$TMPOBJ" | tee "$TMPOUT"
echo -e "\nInvestigating type sizes in C++..."
g++ -x c++ -o "$TMPOBJ" -O2 "$TMPCODE"
"$TMPOBJ" | tee "$TMPOUT"
